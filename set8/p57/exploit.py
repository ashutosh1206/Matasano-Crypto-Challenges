from pwn import *
import random
from Crypto.Util.number import *
import hmac

def crt(list_a, list_m):
    try:
        assert len(list_a) == len(list_m)
    except:
        print "[+] Length of list_a should be equal to length of list_m"
        return -1
    for i in range(len(list_m)):
        for j in range(len(list_m)):
            if GCD(list_m[i], list_m[j])!= 1 and i!=j:
                print "[+] Moduli should be pairwise co-prime"
                return -1
    M = 1
    for i in list_m:
        M *= i
    list_b = [M/i for i in list_m]
    assert len(list_b) == len(list_m)
    try:
        assert [GCD(list_b[i], list_m[i]) == 1 for i in range(len(list_m))]
        list_b_inv = [int(inverse(list_b[i], list_m[i])) for i in range(len(list_m))]
    except:
        print "[+] Encountered an unusual error while calculating inverse using gmpy2.invert()"
        return -1
    x = 0
    for i in range(len(list_m)):
        x += list_a[i]*list_b[i]*list_b_inv[i]
    return x % M

p = 7199773997391911030609999317773941274322764333428698921736339643928346453700085358802973900485592910475480089726140708102474957429903531369589969318716771
q = 236234353446506858198510045061214171961
g = 4565356397095740655436854503483826832136106141639563487732438195343690437606117828318042418238184896212352329118608100083187535033402010599512641674644143
assert pow(g, q, p) == 1

j = (p-1)/q
# r_list is a list containing the first 11 factors of j
r_list = [2, 5, 109, 7963, 8539, 20641, 38833, 39341, 46337, 51977, 54319]
b_list = []
assert (p-1) % q == 0

for i in r_list:
    r = process("./run.sh")
    r.recvline().strip()
    _pub_alice = int(r.recvline().strip()[len("Here, take my public key:  "):])
    while True:
        randnum = random.randint(2, p-2)
        val = pow(randnum, (p-1)/i, p)
        if val != 1:
            break
    r.recvuntil("your public key: ")
    r.sendline(str(val))
    r.recvline().strip()
    _hmac = r.recvline().strip()[len("Here is the corresponding hmac:  "):]
    for _iterator in range(i):
        if hmac.new(long_to_bytes(pow(val, _iterator, p)), "test").hexdigest() == _hmac:
            b_list.append(_iterator)
            break
    r.close()

print crt(b_list, r_list)
